interface EnvObject {
    [key: string]: any;
}
export declare const fileExists: (path: string) => boolean;
export declare const getObjKeys: (obj: object) => string[];
export declare const envToString: (parsed: EnvObject) => string;
export declare const writeToExampleEnv: (path: string, parsedEnv: object) => void;
export declare const emptyObjProps: (obj: EnvObject) => {
    [x: string]: any;
};
export declare const getUniqueVarsFromEnvs: (env: object, envExample: EnvObject) => {
    [x: string]: any;
}[];
export declare const removeStaleVarsFromEnv: (env: object, vars: EnvObject[]) => EnvObject;
export declare const getParsedEnvs: (env: object, envExample: object) => EnvObject;
export declare const syncWithExampleEnv: (envPath: string, envExamplePath: string) => void;
export declare const watchEnv: (envPath: string, envExamplePath: string) => void;
export declare const syncEnv: (filename?: string | undefined) => void;
export {};
