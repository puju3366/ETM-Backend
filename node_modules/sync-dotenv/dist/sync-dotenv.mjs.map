{"version":3,"file":"sync-dotenv.mjs","sources":["../lib/lib.ts"],"sourcesContent":["import { resolve, basename } from \"path\";\nimport fs from \"fs\";\nimport parseEnv from \"parse-dotenv\";\n\nconst ENV_PATH = resolve(process.cwd(), \".env\");\nconst DEFAULT_EXAMPLE_ENV_FILENAME = \".env.example\";\n\ninterface EnvObject {\n\t[key: string]: any;\n}\n\nexport const fileExists = (path: string) => fs.existsSync(path);\n\nexport const getObjKeys = (obj: object) => Object.keys(obj);\n\nexport const envToString = (parsed: EnvObject) =>\n\tgetObjKeys(parsed)\n\t\t.map(key => `${key}=${parsed[key] || \"\"}`)\n\t\t.join(\"\\r\\n\")\n\t\t.replace(/(__\\w+_\\d__=)/g, \"\");\n\nexport const writeToExampleEnv = (path: string, parsedEnv: object) => {\n\tfs.writeFile(path, envToString(parsedEnv), err => {\n\t\tif (err) console.log(`failed to update ${basename(path)}`);\n\t});\n};\n\nexport const emptyObjProps = (obj: EnvObject) => {\n\tconst objCopy = { ...obj };\n\tObject.keys(objCopy).forEach(key => {\n\t\tobjCopy[key] = \"\";\n\t});\n\n\treturn objCopy;\n};\n\nexport const getUniqueVarsFromEnvs = (env: object, envExample: EnvObject) =>\n\tgetObjKeys(envExample)\n\t\t.filter(key => {\n\t\t\tconst envHasKey = env.hasOwnProperty(key);\n\t\t\tconst keyValue = envExample[key];\n\t\t\treturn keyValue && envHasKey;\n\t\t})\n\t\t.map(key => ({ [key]: envExample[key] }));\n\nexport const removeStaleVarsFromEnv = (env: object, vars: EnvObject[]) => {\n\tlet envCopy: EnvObject = { ...env };\n\tenvCopy = emptyObjProps(envCopy);\n\n\tvars.forEach(envObj => {\n\t\tconst [key] = Object.keys(envObj);\n\t\tif (envCopy.hasOwnProperty(key)) {\n\t\t\tenvCopy[key] = envObj[key];\n\t\t}\n\t});\n\n\treturn envCopy;\n};\n\nexport const getParsedEnvs = (env: object, envExample: object) => {\n\tconst envObj = { ...env };\n\tconst uniqueVars = getUniqueVarsFromEnvs(envObj, envExample);\n\n\treturn removeStaleVarsFromEnv(envObj, uniqueVars);\n};\n\nexport const syncWithExampleEnv = (envPath: string, envExamplePath: string) => {\n\tconst parsedEnvs = getParsedEnvs(\n\t\tparseEnv(envPath, { emptyLines: true }),\n\t\tparseEnv(envExamplePath)\n\t);\n\twriteToExampleEnv(envExamplePath, parsedEnvs);\n};\n\nexport const watchEnv = (envPath: string, envExamplePath: string) => {\n\tfs.watchFile(envPath, () => syncWithExampleEnv(envPath, envExamplePath));\n};\n\nexport const syncEnv = (filename?: string) => {\n\tconst EXAMPLE_ENV_PATH = resolve(\n\t\tprocess.cwd(),\n\t\tfilename || DEFAULT_EXAMPLE_ENV_FILENAME\n\t);\n\n\tif (!fileExists(ENV_PATH)) {\n\t\tthrow new Error(\"Cannot find .env in project root\");\n\t}\n\n\tif (!fileExists(EXAMPLE_ENV_PATH)) {\n\t\twriteToExampleEnv(\n\t\t\tDEFAULT_EXAMPLE_ENV_FILENAME,\n\t\t\temptyObjProps(parseEnv(ENV_PATH))\n\t\t);\n\t} else syncWithExampleEnv(ENV_PATH, EXAMPLE_ENV_PATH);\n\n\twatchEnv(ENV_PATH, EXAMPLE_ENV_PATH);\n};\n"],"names":["const","ENV_PATH","resolve","process","cwd","DEFAULT_EXAMPLE_ENV_FILENAME","fileExists","path","fs","existsSync","getObjKeys","obj","Object","keys","envToString","parsed","map","key","join","replace","writeToExampleEnv","parsedEnv","writeFile","err","console","log","basename","emptyObjProps","objCopy","forEach","getUniqueVarsFromEnvs","env","envExample","filter","envHasKey","hasOwnProperty","keyValue","removeStaleVarsFromEnv","vars","envCopy","envObj","getParsedEnvs","uniqueVars","syncWithExampleEnv","envPath","envExamplePath","parsedEnvs","parseEnv","emptyLines","watchEnv","watchFile","syncEnv","filename","EXAMPLE_ENV_PATH","Error"],"mappings":"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"}