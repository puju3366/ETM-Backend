function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var path = require('path');
var fs = _interopDefault(require('fs'));
var parseEnv = _interopDefault(require('parse-dotenv'));

var ENV_PATH = path.resolve(process.cwd(), ".env");
var DEFAULT_EXAMPLE_ENV_FILENAME = ".env.example";
var fileExists = function (path$$1) { return fs.existsSync(path$$1); };
var getObjKeys = function (obj) { return Object.keys(obj); };
var envToString = function (parsed) { return getObjKeys(parsed).map(function (key) { return (key + "=" + (parsed[key] || "")); }).join("\r\n").replace(/(__\w+_\d__=)/g, ""); };
var writeToExampleEnv = function (path$$1, parsedEnv) {
  fs.writeFile(path$$1, envToString(parsedEnv), function (err) {
    if (err) { console.log(("failed to update " + (path.basename(path$$1)))); }
  });
};
var emptyObjProps = function (obj) {
  var objCopy = Object.assign({}, obj);
  Object.keys(objCopy).forEach(function (key) {
    objCopy[key] = "";
  });
  return objCopy;
};
var getUniqueVarsFromEnvs = function (env, envExample) { return getObjKeys(envExample).filter(function (key) {
  var envHasKey = env.hasOwnProperty(key);
  var keyValue = envExample[key];
  return keyValue && envHasKey;
}).map(function (key) {
  var obj;

  return (( obj = {}, obj[key] = envExample[key], obj ));
  }); };
var removeStaleVarsFromEnv = function (env, vars) {
  var envCopy = Object.assign({}, env);
  envCopy = emptyObjProps(envCopy);
  vars.forEach(function (envObj) {
    var ref = Object.keys(envObj);
    var key = ref[0];

    if (envCopy.hasOwnProperty(key)) {
      envCopy[key] = envObj[key];
    }
  });
  return envCopy;
};
var getParsedEnvs = function (env, envExample) {
  var envObj = Object.assign({}, env);
  var uniqueVars = getUniqueVarsFromEnvs(envObj, envExample);
  return removeStaleVarsFromEnv(envObj, uniqueVars);
};
var syncWithExampleEnv = function (envPath, envExamplePath) {
  var parsedEnvs = getParsedEnvs(parseEnv(envPath, {
    emptyLines: true
  }), parseEnv(envExamplePath));
  writeToExampleEnv(envExamplePath, parsedEnvs);
};
var watchEnv = function (envPath, envExamplePath) {
  fs.watchFile(envPath, function () { return syncWithExampleEnv(envPath, envExamplePath); });
};
var syncEnv = function (filename) {
  var EXAMPLE_ENV_PATH = path.resolve(process.cwd(), filename || DEFAULT_EXAMPLE_ENV_FILENAME);

  if (!fileExists(ENV_PATH)) {
    throw new Error("Cannot find .env in project root");
  }

  if (!fileExists(EXAMPLE_ENV_PATH)) {
    writeToExampleEnv(DEFAULT_EXAMPLE_ENV_FILENAME, emptyObjProps(parseEnv(ENV_PATH)));
  } else { syncWithExampleEnv(ENV_PATH, EXAMPLE_ENV_PATH); }

  watchEnv(ENV_PATH, EXAMPLE_ENV_PATH);
};

module.exports = syncEnv;
//# sourceMappingURL=sync-dotenv.js.map
